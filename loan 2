import React, { useState } from 'react';
import {
  Card,
  CardContent,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Typography,
} from '@mui/material';
import { makeStyles } from '@mui/styles';

const useStyles = makeStyles({
  card: {
    marginBottom: '16px',
    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',
    borderRadius: '8px',
  },
  cardContent: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    padding: '16px',
  },
  actions: {
    display: 'flex',
    justifyContent: 'space-between',
    marginTop: '8px',
  },
  popupBox: {
    padding: '16px',
  },
  popupContent: {
    display: 'flex',
    flexDirection: 'column',
    gap: '8px',
  },
});

const LoanCard = ({ loan, onDelete, onUpdate }) => {
  const classes = useStyles();
  const [openDetails, setOpenDetails] = useState(false);
  const [openEdit, setOpenEdit] = useState(false);
  const [editedLoan, setEditedLoan] = useState({ ...loan });

  const handleDelete = () => {
    onDelete(loan.id);
  };

  const handleOpenDetails = () => {
    setOpenDetails(true);
  };

  const handleCloseDetails = () => {
    setOpenDetails(false);
  };

  const handleOpenEdit = () => {
    setOpenEdit(true);
  };

  const handleCloseEdit = () => {
    setOpenEdit(false);
  };

  const handleUpdate = () => {
    onUpdate(editedLoan);
    setOpenEdit(false);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditedLoan((prevLoan) => ({
      ...prevLoan,
      [name]: value,
    }));
  };

  return (
    <Card className={classes.card}>
      <CardContent className={classes.cardContent}>
        <Typography variant="h6" color="primary">
          {loan.name}
        </Typography>
        <Typography variant="body1">Amount: ${loan.amount}</Typography>
        <Typography variant="body1">Interest Rate: {loan.interestRate}%</Typography>
      </CardContent>

      <div className={classes.actions}>
        <Button size="small" variant="outlined" onClick={handleOpenDetails}>
          View Details
        </Button>
        <Button size="small" variant="outlined" onClick={handleOpenEdit}>
          Edit
        </Button>
        <Button size="small" variant="outlined" onClick={handleDelete}>
          Delete
        </Button>
      </div>

      {/* View Details Popup */}
      <Dialog open={openDetails} onClose={handleCloseDetails}>
        <DialogTitle>Loan Details</DialogTitle>
        <DialogContent className={classes.popupBox}>
          <div className={classes.popupContent}>
            <Typography variant="h6" color="primary">
              {loan.name}
            </Typography>
            <Typography variant="body1">Amount: ${loan.amount}</Typography>
            <Typography variant="body1">Interest Rate: {loan.interestRate}%</Typography>
            {/* Add more details */}
          </div>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDetails}>Close</Button>
        </DialogActions>
      </Dialog>

      {/* Edit Popup */}
      <Dialog open={openEdit} onClose={handleCloseEdit}>
        <DialogTitle>Edit Loan</DialogTitle>
        <DialogContent>
          <TextField
            label="Name"
            name="name"
            value={editedLoan.name}
            onChange={handleInputChange}
            fullWidth
            variant="outlined"
          />
          {/* Add other fields for editing */}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleUpdate}>Save</Button>
          <Button onClick={handleCloseEdit}>Cancel</Button>
        </DialogActions>
      </Dialog>
    </Card>
  );
};

const Loans = () => {
  const sampleLoans = [
    { id: 1, name: 'Loan A', amount: 1000, interestRate: 5 },
    { id: 2, name: 'Loan B', amount: 2000, interestRate: 3 },
    { id: 3, name: 'Loan C', amount: 1500, interestRate: 4 },
  ];

  const [loans, setLoans] = useState(sampleLoans);

  const handleDeleteLoan = (loanId) => {
    setLoans(loans.filter((loan) => loan.id !== loanId));
  };

  const handleUpdateLoan = (updatedLoan) => {
    setLoans((prevLoans) =>
      prevLoans.map((loan) => (loan.id === updatedLoan.id ? updatedLoan : loan))
    );
  };

  return (
    <div>
      {loans.map((loan) => (
        <LoanCard key={loan.id} loan={loan} onDelete={handleDeleteLoan} onUpdate={handleUpdateLoan} />
      ))}
    </div>
  );
};

export default Loans;
