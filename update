import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

import AuthenticationService from "../service/AuthenticationService"

import Avatar from '@mui/material/Avatar';
import CssBaseline from '@mui/material/CssBaseline';
import TextField from '@mui/material/TextField';
import { Stack } from "@mui/material";
import Link from '@mui/material/Link';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';
import Button from '@mui/material/Button';
import { LockOpen } from "@mui/icons-material";
import { RadioGroup, Radio, FormControlLabel, FormControl, FormLabel } from "@mui/material"

const EmployeeRegister = () => {
  const history = useNavigate();

  const [fname, setFirstName] = useState('');
  const [lname, setLastName] = useState('');
  const [designation, setDesignation] = useState('');
  const [department, setDepartment] = useState('');
  const [password, setPassword] = useState('');
  const [date_of_birth, setDOB] = useState('');
  const [date_of_joining, setDOJ] = useState('');
  const [phoneno, setPhone] = useState('');
  const [email, setEmail] = useState('');
  const [gender, setGender] = useState('');
  const [errorMessage, setErrorMessage] = useState({});
  const [successMessage, setSuccessMessage] = useState('');

  const handleRegister = async () => {
    const errors = {};
    if (!fname) errors.fname = "First Name is required.";
    if (!lname) errors.lname = "Last Name is required.";
    if (!email) errors.email = "Email is required.";
    if (!password) errors.password = "Password is required.";
    if (!designation) errors.designation = "Designation is required.";
    if (!department) errors.department = "Department is required.";
    if (!date_of_birth) errors.date_of_birth = "Date of Birth is required.";
    if (!date_of_joining) errors.date_of_joining = "Date of Joining is required.";
    if (!phoneno) errors.phoneno = "Phone Number is required.";
    if (!gender) errors.gender = "Gender is required.";

    if (Object.keys(errors).length > 0) {
      setErrorMessage(errors);
      setSuccessMessage('');
      return;
    }

    const user = {
      fname,
      lname,
      designation,
      department,
      password,
      date_of_birth,
      date_of_joining,
      phoneno,
      email,
      gender
    };

    try {
      const registerSuccess = await AuthenticationService.registerEmployee(user);
      if (registerSuccess) {
        setErrorMessage({});
        setSuccessMessage("Registration successful. Redirecting...");
        setTimeout(() => {
          history("/items");
        }, 2000);
      } else {
        setErrorMessage({});
        setSuccessMessage("Invalid email or password.");
      }
    } catch (error) {
      console.error("Registration error", error);
      setErrorMessage({});
      setSuccessMessage("An error occurred during registration.");
    }
  };

  return (
    <Container component="main" maxWidth="xs">
      <CssBaseline />
      <Box
        sx={{
          marginTop: 8,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          padding: '25px',
          bgcolor: 'white',
          boxShadow: '2',
          margin: '10px',
          borderRadius: '5px'
        }}
      >
        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>
          <LockOpen />
        </Avatar>
        <Typography component="h1" variant="h5">
          Employee Sign Up
        </Typography>
        <br />
        <Box component="form" sm={{ mt: 1 }}>
          {/* First Name */}
          <TextField
            margin="normal"
            required
            fullWidth
            id="fname"
            label="First Name"
            name="fname"
            autoFocus
            value={fname}
            onChange={(e) => setFirstName(e.target.value)}
            error={!!errorMessage.fname}
            helperText={errorMessage.fname}
          />
          {/* Last Name */}
          <TextField
            margin="normal"
            required
            fullWidth
            id="lname"
            label="Last Name"
            name="lname"
            value={lname}
            onChange={(e) => setLastName(e.target.value)}
            error={!!errorMessage.lname}
            helperText={errorMessage.lname}
          />
          {/* Email */}
          <TextField
            margin="normal"
            required
            fullWidth
            id="email"
            label="Email Address"
            name="email"
            autoComplete="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            error={!!errorMessage.email}
            helperText={errorMessage.email}
          />
          {/* Password */}
          <TextField
            margin="normal"
            required
            fullWidth
            name="password"
            label="Password"
            type="password"
            id="password"
            autoComplete="current-password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            error={!!errorMessage.password}
            helperText={errorMessage.password}
          />
          {/* Designation and Department */}
          {/* ... similar pattern for other fields */}
          <Stack spacing={2} direction="row" sx={{ marginBottom: 2, marginTop: 1 }}>
            {/* Date of Birth */}
            <TextField
              label="Date of Birth"
              id="date_of_birth"
              name="date_of_birth"
              type="date"
              autoFocus
              value={date_of_birth}
              onChange={(e) => setDOB(e.target.value)}
              fullWidth
              margin="normal"
              required
              InputLabelProps={{
                shrink: true,
              }}
              error={!!errorMessage.date_of_birth}
              helperText={errorMessage.date_of_birth}
            />
            {/* Date of Joining */}
            <TextField
              label="Date of Joining"
              id="date_of_joining"
              name="date_of_joining"
              type="date"
              autoFocus
              value={date_of_joining}
              onChange={(e) => setDOJ(e.target.value)}
              fullWidth
              margin="normal"
              required
              InputLabelProps={{
                shrink: true,
              }}
              error={!!errorMessage.date_of_joining}
              helperText={errorMessage.date_of_joining}
            />
          </Stack>
          {/* Phone Number */}
          <TextField
            label="Phone Number"
            value={phoneno}
            id="phoneno"
            name="phoneno"
            onChange={(e) => setPhone(e.target.value)}
            fullWidth
            margin="normal"
            autoFocus
            required
            error={!!errorMessage.phoneno}
            helperText={errorMessage.phoneno}
          />
          {/* Gender */}
          <FormControl component="fieldset" error={!!errorMessage.gender}>
            <FormLabel component="legend">Gender</FormLabel>
            <RadioGroup
              row
              aria-label="gender"
              name="gender"
              value={gender}
              required
              onChange={(e) => setGender(e.target.value)}
            >
              
              <FormControlLabel value="M" control={<Radio />} label="Male" />
              <FormControlLabel value="F" control={<Radio />} label="Female" />
              <FormControlLabel value="O" control={<Radio />} label="Other" />
            </RadioGroup>
            {errorMessage.gender && <span>{errorMessage.gender}</span>}
          </FormControl>

          <Button
            fullWidth
            variant="contained"
            sx={{ mt: 3, mb: 2, padding: '15px', boxShadow: '2' }}
            onClick={handleRegister}
            color="primary"
          >
            Sign Up
          </Button>

          {errorMessage && <p className="error-message">{errorMessage}</p>}
          {successMessage && <p className="success-message">{successMessage}</p>}

          <Grid container justifyContent='flex-end' >

            <Grid item sx={{ padding: '15px' }}>
              <Link href='/login' >
                {"Already have an account? Sign In"}
              </Link>
            </Grid>
          </Grid>
        </Box>
      </Box>
    </Container>
  );
};

export default EmployeeRegister;

